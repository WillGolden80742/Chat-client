/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.bean.Contact;
import ConnectionFactory.Server;
import javax.swing.table.DefaultTableModel;
import Model.bean.Message;
import com.formdev.flatlaf.FlatDarkLaf;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import static javax.swing.event.HyperlinkEvent.EventType.ACTIVATED;
import util.Communication;

/**
 *
 * @author William
 */
public class Chat extends javax.swing.JFrame {

    private List<Contact> contatos;
    private List<String> campoTextos = new ArrayList<>();
    private final String nickName = "willGolden";

    public Chat() {
        initComponents();
        contatos();
        send.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        campoMensagem = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        caixaDeEntrada = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        contatosJTable = new javax.swing.JTable();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(3254353, 400));
        setMinimumSize(new java.awt.Dimension(500, 400));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        send.setText("ENVIAR");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        campoMensagem.setColumns(20);
        campoMensagem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        campoMensagem.setRows(5);
        campoMensagem.setAutoscrolls(false);
        campoMensagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoMensagemKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(campoMensagem);

        caixaDeEntrada.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                caixaDeEntradaHyperlinkUpdate(evt);
            }
        });
        jScrollPane3.setViewportView(caixaDeEntrada);

        contatosJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Contatos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contatosJTable.setRowHeight(32);
        contatosJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                contatosJTableMouseReleased(evt);
            }
        });
        contatosJTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contatosJTableKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(contatosJTable);
        if (contatosJTable.getColumnModel().getColumnCount() > 0) {
            contatosJTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        try {
            enviarMensagem();
            Mensagens();            
        } catch (IOException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendActionPerformed

    private void contatosJTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contatosJTableKeyReleased
        Mensagens();
    }//GEN-LAST:event_contatosJTableKeyReleased

    private void caixaDeEntradaHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_caixaDeEntradaHyperlinkUpdate
        if (evt.getEventType() == ACTIVATED) {
            try {
                Runtime.getRuntime().exec("explorer.exe \"" + evt.getURL() + "\"");
            } catch (IOException ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_caixaDeEntradaHyperlinkUpdate

    private void contatosJTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contatosJTableMouseReleased
        Mensagens();
    }//GEN-LAST:event_contatosJTableMouseReleased

    private void campoMensagemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoMensagemKeyReleased
        int row = contatosJTable.getSelectedRow();
        if (!campoMensagem.getText().equals("")) {
            send.setEnabled(true);
        } else if (send.isEnabled()) {
            send.setEnabled(false);
        }
        campoTextos.set(row, campoMensagem.getText());
    }//GEN-LAST:event_campoMensagemKeyReleased

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        try {
            Mensagens();
        } catch (ArrayIndexOutOfBoundsException ex) {
        }
    }//GEN-LAST:event_formWindowGainedFocus

    public void addCaixadeEntrada(String value) {
        caixaDeEntrada.setEditable(true);
        caixaDeEntrada.setText(caixaDeEntrada.getText() + value + "\n");
        caixaDeEntrada.setEditable(false);
    }

    public void setCaixadeEntrada(String value) {
        caixaDeEntrada.setEditable(true);
        caixaDeEntrada.setText(value + "\n");
        caixaDeEntrada.setEditable(false);
    }

    public List<Contact> getContatos() {
        return contatos;
    }

    public void setContatos(List<Contact> contatos) {
        this.contatos = contatos;
    }

    public void enviarMensagem() throws IOException, ClassNotFoundException {
        Server server = new Server();
        int row = contatosJTable.getSelectedRow();
        String Message = campoMensagem.getText();
        String From = nickName;
        String To = getContatos().get(row).getNickName();
        Message msg = new Message(Message, From, To);
        Communication communication = new Communication("CREATEMESSAGE");
        communication.setParam("SENDEDMESSAGE", msg);
        communication = server.outPut_inPut(communication);
        System.out.println(communication.getParam("STATUSMESSAGE"));
    }

    public void Mensagens() {
        try {

            int row = contatosJTable.getSelectedRow();
            campoMensagem.setText(campoTextos.get(row));
            String contactNickName = getContatos().get(row).getNickName();
            Server server = new Server();
            Communication communication = new Communication("MESSAGE");
            communication.setParam("nickName", nickName);
            communication.setParam("contactNickName", contactNickName);
            setTitle("Chat - "+nickName+" - Contact - " + getContatos().get(row).getNome() + " : @" + contactNickName);
            communication = server.outPut_inPut(communication);
            List<Message> message = (List<Message>) communication.getParam("MESSAGEREPLY");
            String msg = "";
            caixaDeEntrada.setContentType("text/html");
            msg = "<!DOCTYPE html><html><head></head><body>";
            for (Message m : message) {
                if (!m.getFrom().equals(nickName)) {
                    msg += "<div style=\"background-color:#282a36;margin:5px;padding:5px 5px 5px 5px;\" ><h3 style=\"margin-top:0px;font-size:8px;\">@" + m.getFrom() + " :  </h3>" + m.getMessage() + "<p style=\"margin-top:-10px;\" align=\"right\">" + m.getDate() + "</p></div>";
                } else {
                    msg += "<div style=\"background-color:#383a59;margin:5px;padding:5px 5px 5px 5px;\" >" + m.getMessage() + "<p style=\"margin-top:-10px;\" align=\"right\">" + m.getDate() + "</p></div>";
                }
            }
            msg += "</body></html>";
            setCaixadeEntrada(msg);
        } catch (NullPointerException | NoClassDefFoundError | IOException | ClassNotFoundException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void contatos() {
        try {
            Server server = new Server("localhost", 2134);
            Communication message = new Communication("READ");
            message.setParam("nickName", nickName);
            message = server.outPut_inPut(message);
            setContatos((List<Contact>) message.getParam("READREPLY"));
            readContatosTable();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void readContatosTable() throws IOException, ClassNotFoundException {
        DefaultTableModel modelo = (DefaultTableModel) contatosJTable.getModel();
        modelo.setNumRows(0);
        getContatos().forEach((c) -> {
            campoTextos.add("");
            modelo.addRow(new Object[]{
                c.getNome() + " : @" + c.getNickName(),});
        });
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane caixaDeEntrada;
    private javax.swing.JTextArea campoMensagem;
    private javax.swing.JTable contatosJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton send;
    // End of variables declaration//GEN-END:variables

}
